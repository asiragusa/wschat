// Code generated by mockery v1.0.0
package mocks

import entity "github.com/asiragusa/wschat/entity"
import mock "github.com/stretchr/testify/mock"

// SubscriptionRepository is an autogenerated mock type for the SubscriptionRepository type
type SubscriptionRepository struct {
	mock.Mock
}

// AllTo provides a mock function with given fields: _a0
func (_m *SubscriptionRepository) AllTo(_a0 string) ([]entity.Subscription, error) {
	ret := _m.Called(_a0)

	var r0 []entity.Subscription
	if rf, ok := ret.Get(0).(func(string) []entity.Subscription); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0, _a1
func (_m *SubscriptionRepository) Create(_a0 string, _a1 string) (*entity.Subscription, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.Subscription
	if rf, ok := ret.Get(0).(func(string, string) *entity.Subscription); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Subscription)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: _a0
func (_m *SubscriptionRepository) Delete(_a0 string) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
