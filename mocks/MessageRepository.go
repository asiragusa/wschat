// Code generated by mockery v1.0.0
package mocks

import entity "github.com/asiragusa/wschat/entity"
import mock "github.com/stretchr/testify/mock"

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// AllWithUser provides a mock function with given fields: _a0
func (_m *MessageRepository) AllWithUser(_a0 string) ([]entity.Message, error) {
	ret := _m.Called(_a0)

	var r0 []entity.Message
	if rf, ok := ret.Get(0).(func(string) []entity.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: _a0, _a1, _a2
func (_m *MessageRepository) Create(_a0 string, _a1 string, _a2 string) (*entity.Message, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 *entity.Message
	if rf, ok := ret.Get(0).(func(string, string, string) *entity.Message); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: _a0
func (_m *MessageRepository) GetById(_a0 string) (*entity.Message, error) {
	ret := _m.Called(_a0)

	var r0 *entity.Message
	if rf, ok := ret.Get(0).(func(string) *entity.Message); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
